---
site_title: Yarn
site_description: Hızlı, güvenilir ve güvenli dosya yönetimi.
site_nav_getting_started: Başlarken
site_nav_documentation: Dokümantasyon
site_nav_packages: Paketler
site_nav_blog: Blog
site_bsd_license: BSD lisansı altında dağıtılan
site_code_of_conduct: Davranış Kuralları
site_edit_this_page: Bu sayfayı Düzenle
blog_title: Yarn Blog
guide_additional_reading: Ek Okuma
iframe_github_stars: GitHub Yıldızı
homepage_tagline: Hızlı, güvenilir ve güvenli dosya yönetimi.
homepage_feature_fast_title: Ultra Hızlı.
homepage_feature_fast_description: |
  Yarn yüklediğiniz her paketi önbelleğe alır yani tekrardan yüklenmesi gerekmez. Ayrıca kaynak kullanımını en üst düzeye çıkarmak için işlemleri paralelleştirir, yani yükleme süreleri hiç olmadığı kadar hızlıdır.
homepage_feature_fast_image_alt: Generic placeholder image
homepage_feature_secure_title: Üst düzey Güvenli.
homepage_feature_secure_description: |
  Yarn uses checksums to verify the integrity of every installed package
  before its code is executed.
homepage_feature_secure_image_alt: Generic placeholder image
homepage_feature_reliable_title: Süper Güvenilir.
homepage_feature_reliable_description: |
  Using a detailed, but concise, lockfile format, and a deterministic algorithm
  for installs, Yarn is able to guarantee that an install that worked on one
  system will work exactly the same way on any other system.
homepage_feature_reliable_image_alt: Generic placeholder image
homepage_c2a_text: Ne bekliyorsun?
homepage_c2a_button: Başlayın
homepage_install_button: Yarn'ı yükleyin
homepage_featurette_offline_title: Çevrimdışı modu
homepage_featurette_offline_description: |
  Eğer önceden bir paket yüklediyseniz, daha sonra internet bağlantısı olmadan tekrar yükleyebilirsiniz.
homepage_featurette_deterministic_title: Deterministik
homepage_featurette_deterministic_description: |
  The same dependencies will be installed the same exact way across every
  machine regardless of install order.
homepage_featurette_network_performance_title: Ağ performansı
homepage_featurette_network_performance_description: |
  Yarn efficiently queues up requests and avoids request waterfalls in order
  to maximize network utilization.
homepage_featurette_npm_title: Aynı paketleri
homepage_featurette_npm_description: |
  Install any package from npm and keep your package workflow
  the same.
homepage_featurette_network_resillience_title: Ağ esnekliği
homepage_featurette_network_resillience_description: |
  A single request failing won't cause an install to fail. Requests are retried
  upon failure.
homepage_featurette_flat_mode_title: Flat Mode
homepage_featurette_flat_mode_description: |
  Resolve mismatching versions of dependencies to a single version to avoid
  creating duplicates.
docs_getting_started_title: Başlarken
docs_getting_started_description: |
  Never used a package manager before or just new to Yarn? Let's get you up and
  running in just a couple of minutes.
docs_index: Dökümantasyon
docs_getting_started: Başlarken
docs_install: Kurulum
docs_usage: Kullanım
docs_yarn_workflow_title: Yarn İşleme Prensibi
docs_yarn_workflow_description: |
  How do I use Yarn? There are basic workflows for both creating and consuming
  Yarn packages that will help you get productive quickly.
docs_yarn_workflow: Yarn İşleme Prensibi
docs_creating_a_project: Yeni bir proje oluşturma
docs_managing_dependencies: Bağımlılıkları yönetme
docs_installing_dependencies: Bağımlılıkları yükleme
docs_version_control: Sürüm denetimi ile çalışma
docs_cli_title: CLI komutları
docs_cli_description: |
  Yarn, paket yüklemesini, yönetimini, yayınlamasını ve daha fazlasına izin veren zengin bir komut sistemine sahiptir.
docs_cli_index: CLI Introduction
docs_cli_add: yarn add
docs_cli_add_description: |
  When you want to use another package, you first need to add it to
  your dependencies. Running `yarn add` installs it into your project.
docs_cli_bin: yarn bin
docs_cli_cache: yarn cache
docs_cli_check: yarn check
docs_cli_clean: yarn clean
docs_cli_config: yarn config
docs_cli_generate_lock_entry: yarn generate-lock-entry
docs_cli_global: yarn global
docs_cli_info: yarn info
docs_cli_init: yarn init
docs_cli_install: yarn install
docs_cli_licenses: yarn licenses
docs_cli_link: yarn link
docs_cli_login: yarn login
docs_cli_logout: yarn logout
docs_cli_ls: yarn ls
docs_cli_outdated: yarn outdated
docs_cli_owner: yarn owner
docs_cli_pack: yarn pack
docs_cli_publish: yarn publish
docs_cli_remove: yarn remove
docs_cli_run: yarn run
docs_cli_self_update: yarn self-update
docs_cli_tag: yarn tag
docs_cli_tag_description: |
  Tags are a way of publishing versions of your package with a label.
  Users of your package can install that instead of a version number.
docs_cli_team: yarn team
docs_cli_test: yarn test
docs_cli_unlink: yarn unlink
docs_cli_upgrade: yarn upgrade
docs_cli_version: yarn version
docs_cli_why: yarn why
docs_migrating_from_npm_title: Migrating from npm client
docs_migrating_from_npm_description: |
  Yarn interops directly with many features of npm, including its package
  metadata format, allowing for a painless migration.
docs_migrating_from_npm: Migrating from npm
docs_creating_a_package_title: Bir paket oluşturma
docs_creating_a_package_description: |
  Creating and publishing a yarn package can be done with just a few commands
  and configuration settings, leaving you to focus on your actual code.
docs_creating_a_package: Bir paket oluşturma
docs_publishing_a_package: Bir paketi yayımlamak
docs_dependencies_title: Bağımlılıklar ve Sürümler
docs_dependencies_description: |
  Using Yarn you'll be working with dependencies all the time. Let's go through
  the different types and versions of dependencies.
docs_dependencies: Bağımlılıklar ve sürümler
docs_dependency_types: Types of dependencies
docs_dependency_versions: Versions of dependencies
docs_dependency_versions_description: |
  Packages in Yarn follow Semantic Versioning, also known as “semver”. When you
  install a new package it will be added with a semver version range.
docs_configuration_title: Yapılandırma
docs_configuration_description: |
  Learn how to use package.json to configure your package and dependencies
docs_configuration_index: Yapılandırma
docs_configuration_package_json: package.json
docs_configuration_yarn_lock: yarn.lock
yarn_organization_title: Yarn Organizasyonu / Düzeni
yarn_organization_description: |
  The Yarn organization is a collaboration of many companies and
  individuals dedicated to improving your package management experience.
organization: Organizasyon
code_of_conduct: Davranış Kuralları
contributing: Katkıda bulunma
translations: Çeviri
release_process: Yayın süreci
governance: Yönetim
users: Yarn Kullanıcıları
compare: Yarn Performansını Karşılaştır
blog: Blog
users_lead: Yarn'daki tüm kullanıcılarla tanış.
users_description: >
  Logolar şirket ya da proje temsilcileri tarafından eklenir. Yarn'ı ana mülkleri üzerinde kullanmıyor olabilirler, ama kesinlikle bir yerde kullanıyorlar.
users_add_prompt: Kendi şirketini ya da projeni eklemek mi istiyorsun?
users_add_pr: Pull request aç
users_add_requirements_image: >
  Logos must be a 500x200px (2.5x1) SVG (preferred) or PNG image optimized with svgo, ImageOptim, or another image optimizer.
users_add_requirements_logo: >
  Please use a version of your logo that works well on a white background.
install_intro: >
  Before you start using Yarn, you'll first need to install it on your system. There is a growing number of different ways to install Yarn:
install_select_platform: Yukarıdan platformunuzu seçin
install_os_mac: macOS
install_os_windows: Windows
install_os_linux: Linux
install_os_alternatives: Alternatif
install_test: "Test that Yarn is installed by running:"
install_problems_title: Herhangi bir sorunla mı karşılaştınız?
install_problems_description: >
  If you are unable to install Yarn with any of these installers, please search through GitHub for an existing issue or open a new one.
install_problems_search: Var olan bir konuyu ara
install_problems_new_issue: Yeni bir konu aç
docs_nightly: Nightly Builds
install_nightly_intro: >
  Nightly builds are the latest and greatest versions of Yarn, built using the very latest Yarn source code. Nightly builds are useful to try new features or test bug fixes that have not yet been released as part of a stable release. However, these builds are <strong>not guaranteed to be stable</strong> and may have bugs.
install_nightly_learn_more: See how to install nightly builds
nightly_latest_version: Son Versiyon
nightly_older_versions: Eski Versiyonlar
nightly_select_build_type: Select a build type above to see older builds
install_table_name: İsim
install_table_type: Tür
install_table_size: Boyut
install_table_date: Tarih
loading: Yükleniyor...
install_file:
  deb: Debian paketi
  js: Standalone JS
  js-legacy: Standalone JS (Node < 4.0)
  msi: Windows yükleyicisi
  rpm: RPM
  tar: Tarball
docs_install_ci: Sürekli Entegrasyon
ci_intro: >
  Yarn can easily be used in various continuous integration systems. To speed up builds, the Yarn cache directory can be saved across builds.
ci_select_platform: Select the continuous integration system you're using from the options above
ci_appveyor: AppVeyor
ci_circle: CircleCI
ci_codeship: Codeship
ci_travis: Travis
ci_semaphore: Semaphore
