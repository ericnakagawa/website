---
site_title: Yarn
site_description: 快速、可靠和安全的依赖管理。
site_nav_getting_started: 新手指南
site_nav_documentation: 文档
site_nav_packages: 包裹
site_nav_blog: 博客
site_bsd_license: 在 BSD 协议下发布
site_code_of_conduct: 行为守则
site_edit_this_page: 编辑本页
blog_title: Yarn 博客
guide_additional_reading: 延伸阅读
iframe_github_stars: GitHub 点赞数
homepage_tagline: 快速、可靠和安全的依赖管理。
homepage_feature_fast_title: 极速。
homepage_feature_fast_description: |
  Yarn 缓存它下载的每个包，所以无需重复下载。它还并行化操作以最大化资源利用，所以安装时间比以往快。
homepage_feature_fast_image_alt: 通用占位图
homepage_feature_secure_title: 超级安全。
homepage_feature_secure_description: |
  Yarn 在每个安装包的代码执行前使用校验码验证包的完整性。
homepage_feature_secure_image_alt: 通用占位图
homepage_feature_reliable_title: 超级可靠。
homepage_feature_reliable_description: |
  Yarn 使用一个格式详尽但简洁的 lockfile 和一个精确的算法来安装，能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上。
homepage_feature_reliable_image_alt: 通用占位图
homepage_c2a_text: 你还在等什么？
homepage_c2a_button: 立刻开始！
homepage_install_button: 安装 Yarn
homepage_featurette_offline_title: 离线模式
homepage_featurette_offline_description: |
  如果你以前安装了一个包，你可以没有网络连接再次安装它。
homepage_featurette_deterministic_title: 确定性
homepage_featurette_deterministic_description: |
  The same dependencies will be installed the same exact way across every
  machine regardless of install order.
homepage_featurette_network_performance_title: 网络性能
homepage_featurette_network_performance_description: |
  Yarn 高效的排队请求并且避免请求瀑布以便最大化网络利用率。
homepage_featurette_npm_title: 相同的软件包
homepage_featurette_npm_description: |
  从 npm 安装软件包并保持包处理流程相同。
homepage_featurette_network_resillience_title: 网络适应
homepage_featurette_network_resillience_description: |
  单个请求失败不会导致安装失败，请求失败时会重试。
homepage_featurette_flat_mode_title: 扁平模式
homepage_featurette_flat_mode_description: |
  Resolve mismatching versions of dependencies to a single version to avoid
  creating duplicates.
docs_getting_started_title: 新手指南
docs_getting_started_description: |
  Never used a package manager before or just new to Yarn? Let's get you up and
  running in just a couple of minutes.
docs_index: 文档
docs_getting_started: 新手指南
docs_install: 安装
docs_usage: 使用
docs_yarn_workflow_title: Yarn 工作流
docs_yarn_workflow_description: |
  How do I use Yarn? There are basic workflows for both creating and consuming
  Yarn packages that will help you get productive quickly.
docs_yarn_workflow: Yarn 工作流
docs_creating_a_project: 创建一个新项目
docs_managing_dependencies: 管理依赖项
docs_installing_dependencies: 安装依赖项
docs_version_control: 使用版本控制
docs_cli_title: CLI 命令
docs_cli_description: |
  Yarn is executed through a rich set of commands allowing package
  installation, administration, publishing, and more.
docs_cli_index: CLI 介绍
docs_cli_add: yarn add
docs_cli_add_description: |
  When you want to use another package, you first need to add it to
  your dependencies. Running `yarn add` installs it into your project.
docs_cli_bin: yarn bin
docs_cli_cache: yarn cache
docs_cli_check: yarn check
docs_cli_clean: yarn clean
docs_cli_config: yarn config
docs_cli_generate_lock_entry: yarn generate-lock-entry
docs_cli_global: yarn global
docs_cli_info: yarn info
docs_cli_init: yarn init
docs_cli_install: yarn install
docs_cli_licenses: yarn licenses
docs_cli_link: yarn link
docs_cli_login: yarn login
docs_cli_logout: yarn logout
docs_cli_ls: yarn ls
docs_cli_outdated: yarn outdated
docs_cli_owner: yarn owner
docs_cli_pack: yarn pack
docs_cli_publish: yarn publish
docs_cli_remove: yarn remove
docs_cli_run: yarn run
docs_cli_self_update: yarn self-update
docs_cli_tag: yarn tag
docs_cli_tag_description: |
  Tags are a way of publishing versions of your package with a label.
  Users of your package can install that instead of a version number.
docs_cli_team: yarn team
docs_cli_test: yarn test
docs_cli_unlink: yarn unlink
docs_cli_upgrade: yarn upgrade
docs_cli_version: yarn version
docs_cli_why: yarn why
docs_migrating_from_npm_title: 从 npm 客户端迁移
docs_migrating_from_npm_description: |
  Yarn interops directly with many features of npm, including its package
  metadata format, allowing for a painless migration.
docs_migrating_from_npm: 从 npm 客户端迁移
docs_creating_a_package_title: 创建包
docs_creating_a_package_description: |
  Creating and publishing a yarn package can be done with just a few commands
  and configuration settings, leaving you to focus on your actual code.
docs_creating_a_package: 创建包
docs_publishing_a_package: 发布包
docs_dependencies_title: 依赖与版本
docs_dependencies_description: |
  Using Yarn you'll be working with dependencies all the time. Let's go through
  the different types and versions of dependencies.
docs_dependencies: 依赖与版本
docs_dependency_types: 依赖的类型
docs_dependency_versions: 依赖的版本
docs_dependency_versions_description: |
  Packages in Yarn follow Semantic Versioning, also known as “semver”. When you
  install a new package it will be added with a semver version range.
docs_configuration_title: 配置
docs_configuration_description: |
  Learn how to use package.json to configure your package and dependencies
docs_configuration_index: 配置
docs_configuration_package_json: package.json
docs_configuration_yarn_lock: yarn.lock
yarn_organization_title: Yarn 组织
yarn_organization_description: |
  The Yarn organization is a collaboration of many companies and
  individuals dedicated to improving your package management experience.
organization: 组织
code_of_conduct: 行为守则
contributing: 贡献
translations: 翻译
release_process: 发布过程
governance: 治理
users: Yarn 用户
compare: 比较 Yarn 性能
blog: 博客
users_lead: Meet all the users of Yarn.
users_description: >
  Logos are added by company or project representatives. They may or may not be using Yarn on their main properties, but they're definitely using it somewhere.
users_add_prompt: 想添加你的公司或项目？
users_add_pr: 开一个 pull request
users_add_requirements_image: >
  Logos must be a 500x200px (2.5x1) SVG (preferred) or PNG image optimized with svgo, ImageOptim, or another image optimizer.
users_add_requirements_logo: >
  请使用一个在白色背景上显示很好的你的 logo 版本。
install_intro: >
  在你使用 Yarn 之前，你需要先在系统中安装它。有一些不同的方法（还在增加）安装 Yarn：
install_select_platform: 从上面选择你的平台
install_os_mac: macOS
install_os_windows: Windows
install_os_linux: Linux
install_os_alternatives: 备选
install_test: "运行命令来测试 Yarn 是否安装："
install_problems_title: 有问题吗？
install_problems_description: >
  If you are unable to install Yarn with any of these installers, please search through GitHub for an existing issue or open a new one.
install_problems_search: 搜索现有的 issue
install_problems_new_issue: 开一个新的 issue
docs_nightly: 每夜构建
install_nightly_intro: >
  Nightly builds are the latest and greatest versions of Yarn, built using the very latest Yarn source code. Nightly builds are useful to try new features or test bug fixes that have not yet been released as part of a stable release. However, these builds are <strong>not guaranteed to be stable</strong> and may have bugs.
install_nightly_learn_more: 请参阅如何安装每夜构建
nightly_latest_version: 最新版本
nightly_older_versions: 旧版本
nightly_select_build_type: 选择上述构建类型，来查看旧的构建
install_table_name: 名称
install_table_type: 类型
install_table_size: 大小
install_table_date: 日期
loading: 正在加载...
install_file:
  deb: Debian 软件包
  js: 独立 JS
  js-legacy: 独立 JS (Node < 4.0)
  msi: Windows 安装程序
  rpm: RPM
  tar: 压缩文件
docs_install_ci: 持续集成
ci_intro: >
  Yarn can easily be used in various continuous integration systems. To speed up builds, the Yarn cache directory can be saved across builds.
ci_select_platform: 从上面的选项中选择您正在使用持续集成系统
ci_appveyor: AppVeyor
ci_circle: CircleCI
ci_codeship: Codeship
ci_travis: Travis
ci_semaphore: Semaphore
